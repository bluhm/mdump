Index: stdlib/malloc.c
===================================================================
RCS file: /cvs/src/lib/libc/stdlib/malloc.c,v
retrieving revision 1.271
diff -u -p -r1.271 malloc.c
--- stdlib/malloc.c	23 Jul 2021 18:04:28 -0000	1.271
+++ stdlib/malloc.c	31 Aug 2021 19:59:10 -0000
@@ -23,7 +23,7 @@
  * can buy me a beer in return. Poul-Henning Kamp
  */
 
-/* #define MALLOC_STATS */
+#define MALLOC_STATS
 
 #include <sys/types.h>
 #include <sys/queue.h>
@@ -40,6 +40,9 @@
 
 #ifdef MALLOC_STATS
 #include <sys/tree.h>
+#include <sys/param.h>
+#include <sys/ktrace.h>
+#include <dlfcn.h>
 #include <fcntl.h>
 #endif
 
@@ -206,6 +209,7 @@ struct malloc_readonly {
 	size_t	malloc_guard;		/* use guard pages after allocations? */
 #ifdef MALLOC_STATS
 	int	malloc_stats;		/* dump statistics at end */
+	int	malloc_trace;		/* are we tracing? */
 #endif
 	u_int32_t malloc_canary;	/* Matched against ones in malloc_pool */
 };
@@ -326,6 +330,97 @@ getrbyte(struct dir_info *d)
 	return x;
 }
 
+#ifdef MALLOC_STATS
+struct traceobject {
+	void *f;
+	RB_ENTRY(traceobject) entry;
+};
+
+static int
+omalloc_traceobjectcmp(struct traceobject *o1, struct traceobject *o2)
+{
+	return o1->f < o2->f ? -1 : o1->f > o2->f;
+}
+
+RB_HEAD(traceobjecttree, traceobject);
+RB_PROTOTYPE_STATIC(traceobjecttree, traceobject, entry,
+    omalloc_traceobjectcmp);
+RB_GENERATE_STATIC(traceobjecttree, traceobject, entry, omalloc_traceobjectcmp);
+int __realpath(const char *pathname, char *resolved);
+PROTO_NORMAL(__realpath);
+
+static size_t
+omalloc_traceobjectfmt(void *f, uint8_t *addr)
+{
+	Dl_info info;
+	size_t len;
+	char path[PATH_MAX];
+
+	if (dladdr(f, &info) == 0)
+		return 0;
+
+	memcpy(addr, &f, sizeof(f));
+	len = sizeof(f);
+	f = (void *)((uintptr_t)f - (uintptr_t)info.dli_fbase);
+	memcpy(addr + len, &f, sizeof(f));
+	len += sizeof(f);
+	/*
+	 * XXX realpath would help here for dumping from arbitrary directory.
+	 * This doesn't work because of pledge.
+	 */
+	len += strlcpy(addr + len, info.dli_fname, KTR_USER_MAXLEN - len);
+
+	return len > KTR_USER_MAXLEN ? KTR_USER_MAXLEN : len;
+}
+
+/* ugly hack until I find something better */
+void _spinlock(volatile _atomic_lock_t *);
+void _spinunlock(volatile _atomic_lock_t *);
+
+static void
+omalloc_traceobject(void *f)
+{
+	static struct traceobjecttree traceobjecttree =
+	    RB_INITIALIZER(&traceobjecttree);
+	static struct traceobject *tobjs = NULL;
+	static size_t ntobjs = 0;
+	struct traceobject *tobj, search;
+	uint8_t tracemem[KTR_USER_MAXLEN];
+	size_t tracelen;
+	static volatile _atomic_lock_t lock = 0;
+
+	search.f = f;
+
+	/*
+	 * Don't use per dir_info locking, since that would give a maximum of
+	 * _MALLOC_MUTEXES prints per proces intead of one.
+	 */
+	_spinlock(&lock);
+	if (RB_FIND(traceobjecttree, &traceobjecttree, &search) != NULL)
+		goto out;
+	if ((tracelen = omalloc_traceobjectfmt(f, tracemem)) == 0)
+		goto out;
+	utrace("malloctrobject", tracemem, tracelen);
+
+	if (tobjs == NULL || (ntobjs + 1) * sizeof(*tobjs) >= MALLOC_PAGESIZE) {
+		/*
+		 * We need this memory until we exit, no need to keep track of
+		 * it with a realloc-like structure
+		 */
+		if ((tobjs = MMAP(MALLOC_PAGESIZE, 0)) == MAP_FAILED) {
+			tobjs = NULL;
+			goto out;
+		}
+		ntobjs = 0;
+	}
+	tobj = &(tobjs[ntobjs++]);
+	tobj->f = f;
+	RB_INSERT(traceobjecttree, &traceobjecttree, tobj);
+out:
+	_spinunlock(&lock);
+}
+#endif
+
 static void
 omalloc_parseopt(char opt)
 {
@@ -361,7 +456,7 @@ omalloc_parseopt(char opt)
 	case 'D':
 		mopts.malloc_stats = 1;
 		break;
-#endif /* MALLOC_STATS */
+#endif
 	case 'f':
 		mopts.malloc_freecheck = 0;
 		mopts.malloc_freeunmap = 0;
@@ -390,6 +485,14 @@ omalloc_parseopt(char opt)
 	case 'R':
 		mopts.malloc_realloc = 1;
 		break;
+#ifdef MALLOC_STATS
+	case 't':
+		mopts.malloc_trace = 0;
+		break;
+	case 'T':
+		mopts.malloc_trace++;
+		break;
+#endif
 	case 'u':
 		mopts.malloc_freeunmap = 0;
 		break;
@@ -1117,7 +1220,142 @@ free_bytes(struct dir_info *d, struct re
 	LIST_INSERT_HEAD(mp, info, entries);
 }
 
+#ifdef MALLOC_STATS
+
+#define FRAME(depth)							\
+	case depth:							\
+		/* Requires -fno-omit-frame-pointer or risk segfault */	\
+		if (__builtin_frame_address(depth + 1) == NULL)		\
+			return NULL;					\
+		return __builtin_return_address(depth);
+
+/* Ugly hack untill we have something like backtace(3) */
+void *
+omalloc_backtrace(int depth)
+{
+	/* We return based on parents perspective */
+	switch (depth + 1) {
+	FRAME(1)
+	FRAME(2)
+	FRAME(3)
+	FRAME(4)
+	FRAME(5)
+	FRAME(6)
+	FRAME(7)
+	FRAME(8)
+	FRAME(9)
+	FRAME(10)
+	FRAME(11)
+	FRAME(12)
+	FRAME(13)
+	FRAME(14)
+	FRAME(15)
+	FRAME(16)
+	FRAME(17)
+	FRAME(18)
+	FRAME(19)
+	FRAME(20)
+	FRAME(21)
+	FRAME(22)
+	FRAME(23)
+	FRAME(24)
+	FRAME(25)
+	FRAME(26)
+	FRAME(27)
+	FRAME(28)
+	FRAME(29)
+	FRAME(30)
+	FRAME(31)
+	FRAME(32)
+	FRAME(33)
+	FRAME(34)
+	FRAME(35)
+	FRAME(36)
+	FRAME(37)
+	FRAME(38)
+	FRAME(39)
+	FRAME(40)
+	FRAME(41)
+	FRAME(42)
+	FRAME(43)
+	FRAME(44)
+	FRAME(45)
+	FRAME(46)
+	FRAME(47)
+	FRAME(48)
+	FRAME(49)
+	FRAME(50)
+	FRAME(51)
+	FRAME(52)
+	FRAME(53)
+	FRAME(54)
+	FRAME(55)
+	FRAME(56)
+	FRAME(57)
+	FRAME(58)
+	FRAME(59)
+	FRAME(60)
+	FRAME(61)
+	FRAME(62)
+	FRAME(63)
+	FRAME(64)
+	FRAME(65)
+	FRAME(66)
+	FRAME(67)
+	FRAME(68)
+	FRAME(69)
+	FRAME(70)
+	FRAME(71)
+	FRAME(72)
+	FRAME(73)
+	FRAME(74)
+	FRAME(75)
+	FRAME(76)
+	FRAME(77)
+	FRAME(78)
+	FRAME(79)
+	FRAME(80)
+	FRAME(81)
+	FRAME(82)
+	FRAME(83)
+	FRAME(84)
+	FRAME(85)
+	FRAME(86)
+	FRAME(87)
+	FRAME(88)
+	FRAME(89)
+	/* Should be deep enough, else rinse and repeat */
+	default:
+		return NULL;
+	}
+}
 
+uintptr_t *
+omalloc_fillbt(uintptr_t *bt, size_t nelem)
+{
+	/* We can skip at least our direct invoker */
+	size_t i = 0;
+	void *fn = NULL;
+	int depth = 1;
+
+	do {
+		fn = omalloc_backtrace(depth++);
+		omalloc_traceobject(fn);
+		bt[i++] = (uintptr_t)fn;
+	} while (fn != NULL && i < nelem);
+
+	/* Return address after last element so we can subtract easily */
+	return &(bt[i]);
+}
+
+/* XXX Maybe put this in something like omalloctrace.h? */
+#define MAX_BACKTRACE(used) ((KTR_USER_MAXLEN - (used)) / sizeof(uintptr_t))
+struct malloc_trace {
+	uintptr_t p;
+	size_t sz;
+	uintptr_t bt[MAX_BACKTRACE(sizeof(uintptr_t) + sizeof(size_t))];
+};
+#endif
 
 static void *
 omalloc(struct dir_info *pool, size_t sz, int zero_fill, void *f)
@@ -1277,11 +1515,28 @@ malloc(size_t size)
 {
 	void *r;
 	struct dir_info *d;
+#ifdef MALLOC_STATS
 	int saved_errno = errno;
+	struct malloc_trace trace;
+	uintptr_t *bt = trace.bt;
+#endif
 
 	PROLOGUE(getpool(), "malloc")
 	r = omalloc(d, size, 0, CALLER);
 	EPILOGUE()
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace && r != NULL) {
+		saved_errno = errno;
+		trace.p = (uintptr_t)r;
+		trace.sz = size;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("malloc", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+		errno = saved_errno;
+	}
+#endif
+
 	return r;
 }
 /*DEF_STRONG(malloc);*/
@@ -1291,11 +1546,28 @@ malloc_conceal(size_t size)
 {
 	void *r;
 	struct dir_info *d;
+#ifdef MALLOC_STATS
 	int saved_errno = errno;
+	struct malloc_trace trace;
+	uintptr_t *bt = trace.bt;
+#endif
 
 	PROLOGUE(mopts.malloc_pool[0], "malloc_conceal")
 	r = omalloc(d, size, 0, CALLER);
 	EPILOGUE()
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace && r != NULL) {
+		saved_errno = errno;
+		trace.p = (uintptr_t)r;
+		trace.sz = size;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("malloc", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+		errno = saved_errno;
+	}
+#endif
+
 	return r;
 }
 DEF_WEAK(malloc_conceal);
@@ -1448,16 +1720,35 @@ ofree(struct dir_info **argpool, void *p
 	}
 }
 
+struct free_trace {
+	uintptr_t p;
+	uintptr_t bt[MAX_BACKTRACE(sizeof(uintptr_t))];
+};
+
 void
 free(void *ptr)
 {
 	struct dir_info *d;
 	int saved_errno = errno;
+#ifdef MALLOC_STATS
+	struct free_trace trace;
+	uintptr_t *bt = trace.bt;
+	void *f = CALLER;
+#endif
 
 	/* This is legal. */
 	if (ptr == NULL)
 		return;
 
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace) {
+		trace.p = (uintptr_t)ptr;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("free", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+	}
+#endif
+
 	d = getpool();
 	if (d == NULL)
 		wrterror(d, "free() called before allocation");
@@ -1486,6 +1777,11 @@ freezero(void *ptr, size_t sz)
 {
 	struct dir_info *d;
 	int saved_errno = errno;
+#ifdef MALLOC_STATS
+	struct free_trace trace;
+	uintptr_t *bt = trace.bt;
+	void *f = CALLER;
+#endif
 
 	/* This is legal. */
 	if (ptr == NULL)
@@ -1501,6 +1797,16 @@ freezero(void *ptr, size_t sz)
 		wrterror(d, "freezero() called before allocation");
 	_MALLOC_LOCK(d->mutex);
 	d->func = "freezero";
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace) {
+		trace.p = (uintptr_t)ptr;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("free", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+	}
+#endif
+
 	if (d->active++) {
 		malloc_recurse(d);
 		return;
@@ -1512,6 +1818,13 @@ freezero(void *ptr, size_t sz)
 }
 DEF_WEAK(freezero);
 
+struct realloc_trace {
+	uintptr_t p;
+	uintptr_t origp;
+	size_t sz;
+	uintptr_t bt[MAX_BACKTRACE((2 * sizeof(uintptr_t)) + sizeof(size_t))];
+};
+
 static void *
 orealloc(struct dir_info **argpool, void *p, size_t newsz, void *f)
 {
@@ -1680,6 +1993,7 @@ done:
 		pool->func = saved_function;
 		*argpool = pool;
 	}
+
 	return ret;
 }
 
@@ -1688,11 +2002,29 @@ realloc(void *ptr, size_t size)
 {
 	struct dir_info *d;
 	void *r;
-	int saved_errno = errno;
+#ifdef MALLOC_STATS
+	struct realloc_trace trace;
+	uintptr_t *bt = trace.bt;
+	int saved_errno;
+#endif
 
 	PROLOGUE(getpool(), "realloc")
 	r = orealloc(&d, ptr, size, CALLER);
 	EPILOGUE()
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace && r != NULL) {
+		saved_errno = errno;
+		trace.p = (uintptr_t)r;
+		trace.origp = (uintptr_t)ptr;
+		trace.sz = size;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("realloc", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+		errno = saved_errno;
+	}
+#endif
+
 	return r;
 }
 /*DEF_STRONG(realloc);*/
@@ -1708,7 +2040,11 @@ calloc(size_t nmemb, size_t size)
 {
 	struct dir_info *d;
 	void *r;
+#ifdef MALLOC_STATS
 	int saved_errno = errno;
+	struct malloc_trace trace;
+	uintptr_t *bt = trace.bt;
+#endif
 
 	PROLOGUE(getpool(), "calloc")
 	if ((nmemb >= MUL_NO_OVERFLOW || size >= MUL_NO_OVERFLOW) &&
@@ -1724,6 +2060,19 @@ calloc(size_t nmemb, size_t size)
 	size *= nmemb;
 	r = omalloc(d, size, 1, CALLER);
 	EPILOGUE()
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace && r != NULL) {
+		saved_errno = errno;
+		trace.p = (uintptr_t)r;
+		trace.sz = size;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("malloc", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+		errno = saved_errno;
+	}
+#endif
+
 	return r;
 }
 /*DEF_STRONG(calloc);*/
@@ -1733,7 +2082,11 @@ calloc_conceal(size_t nmemb, size_t size
 {
 	struct dir_info *d;
 	void *r;
+#ifdef MALLOC_STATS
 	int saved_errno = errno;
+	struct malloc_trace trace;
+	uintptr_t *bt = trace.bt;
+#endif
 
 	PROLOGUE(mopts.malloc_pool[0], "calloc_conceal")
 	if ((nmemb >= MUL_NO_OVERFLOW || size >= MUL_NO_OVERFLOW) &&
@@ -1749,6 +2102,19 @@ calloc_conceal(size_t nmemb, size_t size
 	size *= nmemb;
 	r = omalloc(d, size, 1, CALLER);
 	EPILOGUE()
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace && r != NULL) {
+		saved_errno = errno;
+		trace.p = (uintptr_t)r;
+		trace.sz = size;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("malloc", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+		errno = saved_errno;
+	}
+#endif
+
 	return r;
 }
 DEF_WEAK(calloc_conceal);
@@ -1865,7 +2231,11 @@ recallocarray(void *ptr, size_t oldnmemb
 	struct dir_info *d;
 	size_t oldsize = 0, newsize;
 	void *r;
-	int saved_errno = errno;
+#ifdef MALLOC_STATS
+	struct realloc_trace trace;
+	uintptr_t *bt = trace.bt;
+	int saved_errno;
+#endif
 
 	if (!mopts.internal_funcs)
 		return recallocarray_p(ptr, oldnmemb, newnmemb, size);
@@ -1896,6 +2266,20 @@ recallocarray(void *ptr, size_t oldnmemb
 
 	r = orecallocarray(&d, ptr, oldsize, newsize, CALLER);
 	EPILOGUE()
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace && r != NULL) {
+		saved_errno = errno;
+		trace.p = (uintptr_t)r;
+		trace.origp = (uintptr_t)ptr;
+		trace.sz = newsize;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("realloc", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+		errno = saved_errno;
+	}
+#endif
+
 	return r;
 }
 DEF_WEAK(recallocarray);
@@ -2042,8 +2426,12 @@ void *
 aligned_alloc(size_t alignment, size_t size)
 {
 	struct dir_info *d;
-	int saved_errno = errno;
 	void *r;
+#ifdef MALLOC_STATS
+	int saved_errno = errno;
+	struct malloc_trace trace;
+	uintptr_t *bt = trace.bt;
+#endif
 
 	/* Make sure that alignment is a positive power of 2. */
 	if (((alignment - 1) & alignment) != 0 || alignment == 0) {
@@ -2059,6 +2447,19 @@ aligned_alloc(size_t alignment, size_t s
 	PROLOGUE(getpool(), "aligned_alloc")
 	r = omemalign(d, alignment, size, 0, CALLER);
 	EPILOGUE()
+
+#ifdef MALLOC_STATS
+	if (mopts.malloc_trace && r != NULL) {
+		saved_errno = errno;
+		trace.p = (uintptr_t)r;
+		trace.sz = size;
+		bt = omalloc_fillbt(bt, mopts.malloc_trace == 1 ?
+		    1 : sizeof(trace.bt) / sizeof(trace.bt[0]));
+		utrace("malloc", &trace, (uintptr_t)bt - (uintptr_t)&(trace));
+		errno = saved_errno;
+	}
+#endif
+
 	return r;
 }
 /*DEF_STRONG(aligned_alloc);*/
@@ -2300,6 +2701,7 @@ malloc_exit(void)
 {
 	int save_errno = errno, fd, i;
 
+	return;
 	fd = open("malloc.out", O_RDWR|O_APPEND);
 	if (fd != -1) {
 		dprintf(fd, "******** Start dump %s *******\n", __progname);

